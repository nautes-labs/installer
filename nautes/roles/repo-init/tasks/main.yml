- set_fact:
    init_token: "{{ lookup('file', _tmp_file.git.init_token) }}"
    git_ca: "{{ lookup('file', _tmp_file.git.ca) }}"
 
- set_fact:
    sec_ca: "{{ lookup('file', '{{ output_folder_pki }}/ca.crt') }}"

- set_fact:
    git_http_domain: '{{ git_external_url | urlsplit("hostname") }}'
    git_http_port: '{{ git_external_url | urlsplit("port") | default("443") }}'
 
- set_fact:
    git_http_domain: '{{ git_http_domain }}_{{ git_http_port }}'
  when: git_http_port != 443

- set_fact:
    git_ssh_port: '{{ git_ssh_addr | urlsplit("port")  | default("22") }}'
    git_ssh_hostname: '{{ git_ssh_addr | urlsplit("hostname") }}'

- name: Get public key
  shell: ssh-keyscan -p "{{ git_ssh_port }}" "{{ git_ssh_hostname }}"
  register: public_key

- set_fact:
    git_ssh_knowhosts: "{{ public_key.stdout }}"

- name: Wait until HTTP status is 200
  uri:
    url: '{{ git_external_url }}'
    return_content: yes
    validate_certs: no
    status_code:
      - 200
  until: uri_output.status == 200
  retries: 24 
  delay: 5 
  register: uri_output

- name: Init gitlab
  shell: |
    python ./scripts/init-gitlab.py \
     --token "{{ init_token }}" \
     --gitlab_url "{{ git_external_url }}" \
     --group_name {{ tenant_name }} \
     --project_name "{{ tenant_project_name }}" \
     --app_call_back_url "{{ oauth_url }}/callback" \
     --app_name "{{ oauth_app_name }}" \
     --access_token_name "{{ base_opeartor_access_token_name }}"

- name: Change file permissions
  file:
    path: "{{ output_folder_gitrepo }}/tenant_repo_private.key"
    mode: '0600'

- name: Add block of lines to /etc/hosts
  blockinfile:
    path: /etc/ssh/ssh_config
    block: |
      Host {{ git_ssh_hostname }}
          PasswordAuthentication yes
          StrictHostKeyChecking no
          UserKnownHostsFile /dev/null
          IdentityFile /root/.ssh/id_rsa
          IdentityFile {{ output_folder_gitrepo }}/tenant_repo_private.key
    state: present

- name: Git config
  shell: "git config --global user.email \"none@none.com\" &&  git config --global user.name \"none\" "

- name: Check dex client secret exists
  stat:
    path: "{{ output_folder_k8s }}/dex_client_secret"
  register: dex_client_secret_file

- name: Generate dex client secret
  copy:
    content: "{{ 1000000000 | random | to_uuid }}"
    dest: "{{ output_folder_k8s }}/dex_client_secret"
  when: not dex_client_secret_file.stat.exists

- set_fact:
    git_info: "{{ lookup('file', '{{ output_folder_gitrepo }}/infos.yaml' )| from_yaml }}"

- set_fact:
    tenant_repo_id: "{{ git_info.tenant_repo_id }}"
    tenant_repo_ssh_addr: "{{ git_info.tenant_repo_ssh_addr }}"
    oauth_clientID: "{{ git_info.client_id }}"
    oauth_client_secret: "{{ git_info.client_sercret }}"
    dex_client_secret: "{{ lookup('file', '{{ output_folder_k8s }}/dex_client_secret' ) }}"
    
- name: Load template file list
  ansible.builtin.include_vars:
    file: /opt/management/index.yaml

- name: Clone a repository
  git:
    repo: '{{ tenant_repo_ssh_addr }}'
    dest: /tmp/tenant-repo
  ignore_errors: yes

- name: Copy directory to remote host excluding a subdirectory
  synchronize:
    src: /opt/management/
    dest: /tmp/tenant-repo
    rsync_opts:
      - "--exclude=.git"
      - "--exclude=index.yaml"

- name: Generate tenant repo
  template:
    src: "/opt/management/{{ item }}"
    dest: "/tmp/tenant-repo/{{ item }}"
    mode: '0644'
  loop: "{{ templates }}"

- name: Add commit 
  shell: "cd /tmp/tenant-repo && git add . && git commit -m 'generate tenant repo'"
  ignore_errors: yes

- name: Push to remote
  shell: "cd /tmp/tenant-repo && git push"
  ignore_errors: yes
