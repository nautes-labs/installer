- stat:
    path: "{{ output_folder_hosts }}/ansible_hosts"
  register: _ansible_host_file

- stat:
    path: "{{ flag.installation.path }}/{{ flag.installation.name.git }}"
  register: _skip_git_flag

- stat:
    path: "{{ flag.installation.path }}/{{ flag.installation.name.kubernetes }}"
  register:  _skip_kubernetes_flag

- name: Ensure destination directory exists
  file:
    path: /tmp/terraform
    state: directory

- name: Create output folder
  file:
    path: "{{ item }}"
    state: directory
  loop:
  - "{{ output_folder }}/"
  - "{{ output_folder_hosts }}/"

- name: Create login keypair
  openssh_keypair:
    path: "{{ output_folder_hosts }}/id_rsa"
    size: 2048
 
- name: Copy host info template
  copy:
    src: ansible-host-vars.tftpl
    dest: /tmp/terraform

- name: Create file from template
  template:
    src: main.tf.j2
    dest: /tmp/terraform/main.tf
  when: _ansible_host_file.stat.exists == false or ( _skip_git_flag.stat.exists == false and _skip_kubernetes_flag.stat.exists == false )

- name: Create instance
  ansible.builtin.shell:
    chdir: /tmp/terraform
    cmd: terraform init && terraform apply -auto-approve

- name: Load host info
  ansible.builtin.include_vars:
    file: "{{ ansible_host_source }}"

- name: Grep git hosts from host info
  set_fact: 
    gits: "{{ gits | default([]) + [item] }}"
  loop: "{{ terraform_hosts }}"
  when: item.type == _host_type.git

- name: Grep kubernetes hosts from host info
  set_fact: 
    kubernetes: "{{ kubernetes | default([]) + [item] }}"
  loop: "{{ terraform_hosts }}"
  when: item.type == _host_type.kubernetes

- name: Grep secret hosts from host info
  set_fact: 
    secrets: "{{ secrets | default([]) + [item] }}"
  loop: "{{ terraform_hosts }}"
  when: item.type == _host_type.secret

- name: Create file from template
  template:
    src: ansible_hosts.j2
    dest: "{{ output_folder_hosts }}/ansible_hosts"


